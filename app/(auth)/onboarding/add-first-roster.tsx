import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Pressable,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ScrollView,
} from 'react-native';
import { useRouter } from 'expo-router';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { Colors } from '@/constants/Colors';
import { Button } from '@/components/ui/buttons/Button';
import { useOnboardingState } from '@/hooks/useOnboardingState';
import { useRoster } from '@/contexts/RosterContext';
import { useDates } from '@/contexts/DateContext';

const ROSTER_STATUSES = [
  { value: 'new', label: 'New', icon: 'sparkles', color: '#4CAF50' },
  { value: 'active', label: 'Active', icon: 'heart', color: '#FE5268' },
  { value: 'fading', label: 'Fading', icon: 'trending-down', color: '#FF9800' },
  { value: 'ended', label: 'Ended', icon: 'close-circle', color: '#9E9E9E' },
];

export default function AddFirstRosterScreen() {
  const router = useRouter();
  const { markRosterAdded, completeOnboarding } = useOnboardingState();
  const { addPerson } = useRoster();
  const { createDateEntry } = useDates();
  const [isLoading, setIsLoading] = useState(false);
  
  const [formData, setFormData] = useState({
    name: '',
    status: 'new',
    howWeMet: '',
  });

  const handleAddToRoster = async () => {
    if (!formData.name.trim()) {
      Alert.alert('Error', 'Please enter a name');
      return;
    }

    try {
      setIsLoading(true);
      
      // Add person to roster
      const newPerson = await addPerson({
        name: formData.name.trim(),
        status: formData.status,
        howWeMet: formData.howWeMet.trim(),
      });

      // Create auto-generated first post
      if (newPerson) {
        await createDateEntry({
          personName: newPerson.name,
          type: 'roster_update',
          title: `Added ${newPerson.name} to roster!`,
          description: `Status: ${formData.status}${formData.howWeMet ? ` | Met at: ${formData.howWeMet}` : ''}`,
          isPrivate: false,
          autoGenerated: true,
        });
      }
      
      // Mark step as complete
      await markRosterAdded();
      await completeOnboarding();
      
      // Navigate to main app with success message
      router.replace('/(tabs)');
    } catch (error) {
      console.error('Error adding to roster:', error);
      Alert.alert('Error', 'Failed to add to roster. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSkip = async () => {
    await markRosterAdded();
    await completeOnboarding();
    router.replace('/(tabs)');
  };

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#FFF8F3', '#FFE0CC']}
        style={StyleSheet.absoluteFillObject}
      />

      <SafeAreaView style={styles.safeArea}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardView}
        >
          <ScrollView 
            contentContainerStyle={styles.scrollContent}
            showsVerticalScrollIndicator={false}
            keyboardShouldPersistTaps="handled"
          >
            {/* Progress bar */}
            <View style={styles.progressContainer}>
              <View style={styles.progressBar}>
                <View style={[styles.progressFill, { width: '100%' }]} />
              </View>
              <Text style={styles.progressText}>Step 3 of 3</Text>
            </View>

            {/* Content */}
            <View style={styles.content}>
              {/* Icon */}
              <View style={styles.iconContainer}>
                <Ionicons name="person-add-outline" size={80} color="#FE5268" />
              </View>

              {/* Title and description */}
              <Text style={styles.title}>Add Your First Roster Member</Text>
              <Text style={styles.description}>
                This can be someone new, an ex, or even a crush. Don't worry, this is for your eyes only unless you choose to share.
              </Text>

              {/* Form */}
              <View style={styles.form}>
                {/* Name input */}
                <View style={styles.inputGroup}>
                  <Text style={styles.label}>Name</Text>
                  <TextInput
                    style={styles.input}
                    value={formData.name}
                    onChangeText={(text) => setFormData(prev => ({ ...prev, name: text }))}
                    placeholder="e.g., Marcus"
                    placeholderTextColor="#999"
                    autoCapitalize="words"
                    returnKeyType="next"
                  />
                </View>

                {/* Status selector */}
                <View style={styles.inputGroup}>
                  <Text style={styles.label}>Status</Text>
                  <View style={styles.statusContainer}>
                    {ROSTER_STATUSES.map((status) => (
                      <Pressable
                        key={status.value}
                        style={[
                          styles.statusOption,
                          formData.status === status.value && styles.statusOptionSelected,
                        ]}
                        onPress={() => setFormData(prev => ({ ...prev, status: status.value }))}
                      >
                        <Ionicons 
                          name={status.icon as any} 
                          size={20} 
                          color={formData.status === status.value ? 'white' : status.color}
                        />
                        <Text style={[
                          styles.statusText,
                          formData.status === status.value && styles.statusTextSelected,
                        ]}>
                          {status.label}
                        </Text>
                      </Pressable>
                    ))}
                  </View>
                </View>

                {/* How we met input */}
                <View style={styles.inputGroup}>
                  <Text style={styles.label}>How you met (optional)</Text>
                  <TextInput
                    style={styles.input}
                    value={formData.howWeMet}
                    onChangeText={(text) => setFormData(prev => ({ ...prev, howWeMet: text }))}
                    placeholder="e.g., Coffee shop, Dating app, Through friends"
                    placeholderTextColor="#999"
                    returnKeyType="done"
                    onSubmitEditing={handleAddToRoster}
                  />
                </View>
              </View>

              {/* Success message */}
              <View style={styles.successNote}>
                <Ionicons name="checkmark-circle" size={20} color="#4CAF50" />
                <Text style={styles.successText}>
                  Your first post will be auto-generated when you add them!
                </Text>
              </View>
            </View>
          </ScrollView>

          {/* Actions */}
          <View style={styles.actions}>
            <Button
              onPress={handleAddToRoster}
              loading={isLoading}
              disabled={!formData.name.trim()}
              style={styles.addButton}
            >
              Add to Roster
            </Button>

            <Pressable onPress={handleSkip} style={styles.skipButton}>
              <Text style={styles.skipText}>I'll do this later</Text>
            </Pressable>
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  safeArea: {
    flex: 1,
  },
  keyboardView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
  },
  progressContainer: {
    paddingHorizontal: 40,
    paddingTop: 20,
    alignItems: 'center',
  },
  progressBar: {
    width: '100%',
    height: 4,
    backgroundColor: 'rgba(0,0,0,0.1)',
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#FE5268',
  },
  progressText: {
    marginTop: 8,
    fontSize: 12,
    color: '#666',
  },
  content: {
    flex: 1,
    paddingHorizontal: 40,
    paddingTop: 40,
    alignItems: 'center',
  },
  iconContainer: {
    marginBottom: 32,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
    textAlign: 'center',
  },
  description: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 32,
  },
  form: {
    width: '100%',
    gap: 24,
  },
  inputGroup: {
    width: '100%',
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    backgroundColor: 'white',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    color: '#333',
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)',
  },
  statusContainer: {
    flexDirection: 'row',
    gap: 8,
  },
  statusOption: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 6,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    backgroundColor: 'white',
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)',
  },
  statusOptionSelected: {
    backgroundColor: '#FE5268',
    borderColor: '#FE5268',
  },
  statusText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
  },
  statusTextSelected: {
    color: 'white',
  },
  successNote: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginTop: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: 'rgba(76, 175, 80, 0.1)',
    borderRadius: 12,
  },
  successText: {
    fontSize: 14,
    color: '#4CAF50',
    flex: 1,
  },
  actions: {
    paddingHorizontal: 40,
    paddingBottom: 40,
    gap: 16,
  },
  addButton: {
    backgroundColor: '#FE5268',
    paddingVertical: 16,
    borderRadius: 30,
  },
  skipButton: {
    alignItems: 'center',
    paddingVertical: 12,
  },
  skipText: {
    fontSize: 14,
    color: '#666',
  },
});