import React from 'react';
import {
  StyleSheet,
  ScrollView,
  View,
  Text,
  Image,
  Platform,
  Pressable,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';
import { DateCard } from '@/components/ui/cards/DateCard';
import { getRelationshipData } from '@/lib/relationshipData';

export default function DatingHistoryScreen() {
  const { username, person } = useLocalSearchParams();
  const router = useRouter();
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];

  // Get relationship data
  const relationshipKey = `${username}-${person}`;
  const relationship = getRelationshipData(relationshipKey);

  if (!relationship) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]} edges={['top']}>
        <View style={styles.errorContainer}>
          <Text style={[styles.errorText, { color: colors.text }]}>
            No dating history found for this relationship.
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'active': return colors.statusActive;
      case 'new': return colors.statusNew;
      case 'fading': return colors.statusFading;
      case 'ended': return colors.statusEnded;
      default: return colors.textSecondary;
    }
  };

  const getStatusBgColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'active': return colors.statusActive + '20';
      case 'new': return colors.statusNew + '20';
      case 'fading': return colors.statusFading + '20';
      case 'ended': return colors.statusEnded + '20';
      default: return colors.border;
    }
  };

  const getTrendIcon = () => {
    switch (relationship.stats.trend) {
      case 'up': return 'trending-up';
      case 'down': return 'trending-down';
      default: return 'remove';
    }
  };

  const getTrendColor = () => {
    switch (relationship.stats.trend) {
      case 'up': return colors.statusActive;
      case 'down': return colors.statusEnded;
      default: return colors.textSecondary;
    }
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]} edges={['top']}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerTop}>
            <Pressable onPress={() => router.back()} style={styles.backButton}>
              <Ionicons name="arrow-back" size={24} color={colors.text} />
            </Pressable>
            <Text style={[styles.headerTitle, { color: colors.text }]}>Dating History</Text>
            <View style={styles.headerSpacer} />
          </View>
        </View>

        {/* Relationship Header */}
        <View style={[styles.relationshipHeader, { backgroundColor: colors.card }]}>
          <View style={styles.avatarSection}>
            <Image source={{ uri: relationship.poster.avatar }} style={styles.avatar} />
            <View style={styles.centerInfo}>
              <View style={styles.ratingRow}>
                <Text style={[styles.largeRating, { color: colors.primary }]}>
                  {relationship.stats.averageRating}/5
                </Text>
                <Ionicons 
                  name={getTrendIcon()} 
                  size={20} 
                  color={getTrendColor()} 
                  style={styles.trendIcon}
                />
              </View>
              <View 
                style={[
                  styles.statusBadge,
                  { backgroundColor: getStatusBgColor(relationship.status) }
                ]}
              >
                <Text 
                  style={[
                    styles.statusText,
                    { color: getStatusColor(relationship.status) }
                  ]}
                >
                  {relationship.status}
                </Text>
              </View>
            </View>
            <Image source={{ uri: relationship.person.avatar }} style={styles.avatar} />
          </View>
          
          <View style={styles.relationshipNames}>
            <Text style={[styles.relationshipTitle, { color: colors.text }]}>
              {relationship.poster.name} & {relationship.person.name}
            </Text>
          </View>
        </View>

        {/* Stats Grid */}
        <View style={styles.statsGrid}>
          <View style={[styles.statCard, { backgroundColor: colors.card }]}>
            <Text style={[styles.statValue, { color: colors.primary }]}>
              {relationship.stats.totalDates}
            </Text>
            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>
              Total Dates
            </Text>
          </View>
          <View style={[styles.statCard, { backgroundColor: colors.card }]}>
            <Text style={[styles.statValue, { color: colors.primary }]}>
              {relationship.stats.averageRating}
            </Text>
            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>
              Avg Rating
            </Text>
          </View>
          <View style={[styles.statCard, { backgroundColor: colors.card }]}>
            <Text style={[styles.statValue, { color: colors.primary }]}>
              {relationship.stats.compatibility}
            </Text>
            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>
              Compatibility
            </Text>
          </View>
          <View style={[styles.statCard, { backgroundColor: colors.card }]}>
            <Text style={[styles.statValue, { color: colors.primary }]}>
              {relationship.stats.daysSinceFirst || 'N/A'}
            </Text>
            <Text style={[styles.statLabel, { color: colors.textSecondary }]}>
              Days
            </Text>
          </View>
        </View>

        {/* Timeline Info */}
        <View style={[styles.timelineInfo, { backgroundColor: colors.card }]}>
          <View style={styles.timelineItem}>
            <Text style={[styles.timelineLabel, { color: colors.textSecondary }]}>First Date:</Text>
            <Text style={[styles.timelineValue, { color: colors.text }]}>
              {relationship.stats.firstDate}
            </Text>
          </View>
          <View style={styles.timelineItem}>
            <Text style={[styles.timelineLabel, { color: colors.textSecondary }]}>Most Recent:</Text>
            <Text style={[styles.timelineValue, { color: colors.text }]}>
              {relationship.stats.lastDate}
            </Text>
          </View>
        </View>

        {/* Date History Section */}
        <View style={styles.historySection}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Complete History</Text>
          <View style={styles.datesList}>
            {relationship.dateHistory.map((date) => (
              <DateCard
                key={date.id}
                id={date.id}
                personName={relationship.person.name}
                date={date.date}
                location={date.location}
                rating={date.rating}
                notes={date.notes}
                tags={date.tags}
                imageUri={relationship.poster.avatar}
                poll={date.poll}
                userPollVote={date.userPollVote}
                comments={date.comments}
                likeCount={date.likeCount || 0}
                commentCount={date.commentCount || 0}
                isLiked={date.isLiked || false}
                onPress={() => console.log(`Date details: ${date.id}`)}
                onLike={() => console.log(`Like date: ${date.id}`)}
                onComment={() => console.log(`Comment on date: ${date.id}`)}
              />
            ))}
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  headerTop: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    padding: 4,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    flex: 1,
    textAlign: 'center',
  },
  headerSpacer: {
    width: 32,
  },
  relationshipHeader: {
    margin: 16,
    padding: 20,
    borderRadius: 16,
  },
  avatarSection: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  avatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  centerInfo: {
    alignItems: 'center',
  },
  ratingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  largeRating: {
    fontSize: 24,
    fontWeight: '700',
  },
  trendIcon: {
    marginLeft: 8,
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  relationshipNames: {
    alignItems: 'center',
  },
  relationshipTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  statsGrid: {
    flexDirection: 'row',
    gap: 12,
    paddingHorizontal: 16,
    marginBottom: 16,
  },
  statCard: {
    flex: 1,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  statValue: {
    fontSize: 20,
    fontWeight: '700',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    textAlign: 'center',
  },
  timelineInfo: {
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
    borderRadius: 12,
  },
  timelineItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  timelineLabel: {
    fontSize: 14,
  },
  timelineValue: {
    fontSize: 14,
    fontWeight: '500',
  },
  historySection: {
    paddingHorizontal: 16,
    paddingBottom: Platform.OS === 'ios' ? 100 : 80,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
  },
  datesList: {
    gap: 12,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  errorText: {
    fontSize: 16,
    textAlign: 'center',
  },
});